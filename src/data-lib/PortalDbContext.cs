// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable enable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace XtremeIdiots.Portal.DataLib;

public partial class PortalDbContext : DbContext
{
    public PortalDbContext(DbContextOptions<PortalDbContext> options)
        : base(options)
    {
    }

    public virtual DbSet<AdminAction> AdminActions { get; set; }

    public virtual DbSet<BanFileMonitor> BanFileMonitors { get; set; }

    public virtual DbSet<ChatMessage> ChatMessages { get; set; }

    public virtual DbSet<Demo> Demos { get; set; }

    public virtual DbSet<GameServer> GameServers { get; set; }

    public virtual DbSet<GameServerEvent> GameServerEvents { get; set; }

    public virtual DbSet<GameServerStat> GameServerStats { get; set; }

    public virtual DbSet<LivePlayer> LivePlayers { get; set; }

    public virtual DbSet<Map> Maps { get; set; }

    public virtual DbSet<MapPack> MapPacks { get; set; }

    public virtual DbSet<MapPackMap> MapPackMaps { get; set; }

    public virtual DbSet<MapVote> MapVotes { get; set; }

    public virtual DbSet<Player> Players { get; set; }

    public virtual DbSet<PlayerAlias> PlayerAliases { get; set; }

    public virtual DbSet<PlayerIpAddress> PlayerIpAddresses { get; set; }

    public virtual DbSet<PlayerTag> PlayerTags { get; set; }

    public virtual DbSet<ProtectedName> ProtectedNames { get; set; }

    public virtual DbSet<RecentPlayer> RecentPlayers { get; set; }

    public virtual DbSet<Report> Reports { get; set; }

    public virtual DbSet<Tag> Tags { get; set; }

    public virtual DbSet<UserProfile> UserProfiles { get; set; }

    public virtual DbSet<UserProfileClaim> UserProfileClaims { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<AdminAction>(entity =>
        {
            entity.HasKey(e => e.AdminActionId).HasName("PK_dbo.AdminActions");

            entity.Property(e => e.AdminActionId).HasDefaultValueSql("newsequentialid()");

            entity.HasOne(d => d.Player).WithMany(p => p.AdminActions)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.AdminActions_dbo.Players_PlayerId");

            entity.HasOne(d => d.UserProfile).WithMany(p => p.AdminActions).HasConstraintName("FK_dbo.AdminActions_dbo.UserProfiles_UserProfileId");
        });

        modelBuilder.Entity<BanFileMonitor>(entity =>
        {
            entity.HasKey(e => e.BanFileMonitorId).HasName("PK_dbo.BanFileMonitors");

            entity.Property(e => e.BanFileMonitorId).HasDefaultValueSql("newsequentialid()");

            entity.HasOne(d => d.GameServer).WithMany(p => p.BanFileMonitors)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.BanFileMonitors_dbo.GameServers_GameServerId");
        });

        modelBuilder.Entity<ChatMessage>(entity =>
        {
            entity.HasKey(e => e.ChatMessageId).HasName("PK_dbo.ChatMessage");

            entity.Property(e => e.ChatMessageId).HasDefaultValueSql("newsequentialid()");

            entity.HasOne(d => d.GameServer).WithMany(p => p.ChatMessages)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ChatMessages_dbo.GameServers_GameServerId");

            entity.HasOne(d => d.Player).WithMany(p => p.ChatMessages)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ChatMessages_dbo.Players_PlayerId");
        });

        modelBuilder.Entity<Demo>(entity =>
        {
            entity.HasKey(e => e.DemoId).HasName("PK_dbo.Demos");

            entity.Property(e => e.DemoId).HasDefaultValueSql("newsequentialid()");

            entity.HasOne(d => d.UserProfile).WithMany(p => p.Demos).HasConstraintName("FK_dbo.Demos_dbo.UserProfiles_UserProfileId");
        });

        modelBuilder.Entity<GameServer>(entity =>
        {
            entity.HasKey(e => e.GameServerId).HasName("PK_dbo.GameServers");

            entity.Property(e => e.GameServerId).HasDefaultValueSql("newsequentialid()");
            entity.Property(e => e.FtpPort).HasDefaultValue(21);
            entity.Property(e => e.LiveCurrentPlayers).HasDefaultValue(0);
            entity.Property(e => e.LiveLastUpdated).HasDefaultValue(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));
            entity.Property(e => e.LiveMaxPlayers).HasDefaultValue(0);
        });

        modelBuilder.Entity<GameServerEvent>(entity =>
        {
            entity.Property(e => e.GameServerEventId).HasDefaultValueSql("newsequentialid()");

            entity.HasOne(d => d.GameServer).WithMany(p => p.GameServerEvents)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GameServerEvents_GameServerId");
        });

        modelBuilder.Entity<GameServerStat>(entity =>
        {
            entity.Property(e => e.GameServerStatId).HasDefaultValueSql("newsequentialid()");

            entity.HasOne(d => d.GameServer).WithMany(p => p.GameServerStats).HasConstraintName("FK_GameServerStats_GameServer");
        });

        modelBuilder.Entity<LivePlayer>(entity =>
        {
            entity.HasKey(e => e.LivePlayerId).HasName("PK_dbo.LivePlayers");

            entity.Property(e => e.LivePlayerId).HasDefaultValueSql("newsequentialid()");

            entity.HasOne(d => d.GameServer).WithMany(p => p.LivePlayers).HasConstraintName("FK_dbo.LivePlayers_dbo.GameServers_GameServer_GameServerId");

            entity.HasOne(d => d.Player).WithMany(p => p.LivePlayers).HasConstraintName("FK_dbo.LivePlayers_dbo.Players_PlayerId");
        });

        modelBuilder.Entity<Map>(entity =>
        {
            entity.HasKey(e => e.MapId).HasName("PK_dbo.Maps");

            entity.Property(e => e.MapId).HasDefaultValueSql("newsequentialid()");
        });

        modelBuilder.Entity<MapPack>(entity =>
        {
            entity.HasKey(e => e.MapPackId).HasName("PK_dbo.MapPacks");

            entity.Property(e => e.MapPackId).HasDefaultValueSql("newsequentialid()");

            entity.HasOne(d => d.GameServer).WithMany(p => p.MapPacks).HasConstraintName("FK_MapPacks_GameServer");
        });

        modelBuilder.Entity<MapPackMap>(entity =>
        {
            entity.HasKey(e => e.MapPackMapId).HasName("PK_dbo.MapPackMap");

            entity.Property(e => e.MapPackMapId).HasDefaultValueSql("newsequentialid()");

            entity.HasOne(d => d.Map).WithMany(p => p.MapPackMaps)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.MapPackMap_dbo.Maps_MapId");

            entity.HasOne(d => d.MapPack).WithMany(p => p.MapPackMaps).HasConstraintName("FK_dbo.MapPackMap_dbo.MapPacks_MapPackId");
        });

        modelBuilder.Entity<MapVote>(entity =>
        {
            entity.HasKey(e => e.MapVoteId).HasName("PK_dbo.MapVotes");

            entity.Property(e => e.MapVoteId).HasDefaultValueSql("newsequentialid()");

            entity.HasOne(d => d.GameServer).WithMany(p => p.MapVotes).HasConstraintName("FK_dbo.MapVotes_dbo.GameServers_GameServerId");

            entity.HasOne(d => d.Map).WithMany(p => p.MapVotes)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.MapVotes_dbo.Maps_MapId");

            entity.HasOne(d => d.Player).WithMany(p => p.MapVotes)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.MapVotes_dbo.Players_PlayerId");
        });

        modelBuilder.Entity<Player>(entity =>
        {
            entity.HasKey(e => e.PlayerId).HasName("PK_dbo.Players");

            entity.Property(e => e.PlayerId).HasDefaultValueSql("newsequentialid()");
        });

        modelBuilder.Entity<PlayerAlias>(entity =>
        {
            entity.HasKey(e => e.PlayerAliasId).HasName("PK_dbo.PlayerAlias");

            entity.Property(e => e.PlayerAliasId).HasDefaultValueSql("newsequentialid()");

            entity.HasOne(d => d.Player).WithMany(p => p.PlayerAliases).HasConstraintName("FK_dbo.PlayerAlias_dbo.Players_PlayerId");
        });

        modelBuilder.Entity<PlayerIpAddress>(entity =>
        {
            entity.HasKey(e => e.PlayerIpAddressId).HasName("PK_dbo.PlayerIpAddresses");

            entity.Property(e => e.PlayerIpAddressId).HasDefaultValueSql("newsequentialid()");

            entity.HasOne(d => d.Player).WithMany(p => p.PlayerIpAddresses).HasConstraintName("FK_dbo.PlayerIpAddresses_dbo.Players_PlayerId");
        });

        modelBuilder.Entity<PlayerTag>(entity =>
        {
            entity.HasKey(e => e.PlayerTagId).HasName("PK_dbo.PlayerTags");

            entity.Property(e => e.PlayerTagId).HasDefaultValueSql("newsequentialid()");

            entity.HasOne(d => d.Player).WithMany(p => p.PlayerTags).HasConstraintName("FK_dbo.PlayerTags_dbo.Players_PlayerId");

            entity.HasOne(d => d.Tag).WithMany(p => p.PlayerTags).HasConstraintName("FK_dbo.PlayerTags_dbo.Tags_TagId");

            entity.HasOne(d => d.UserProfile).WithMany(p => p.PlayerTags).HasConstraintName("FK_dbo.PlayerTags_dbo.UserProfiles_UserProfileId");
        });

        modelBuilder.Entity<ProtectedName>(entity =>
        {
            entity.HasKey(e => e.ProtectedNameId).HasName("PK_dbo.ProtectedNames");

            entity.Property(e => e.ProtectedNameId).HasDefaultValueSql("newsequentialid()");

            entity.HasOne(d => d.CreatedByUserProfile).WithMany(p => p.ProtectedNames).HasConstraintName("FK_dbo.ProtectedNames_dbo.UserProfiles_CreatedByUserProfileId");

            entity.HasOne(d => d.Player).WithMany(p => p.ProtectedNames).HasConstraintName("FK_dbo.ProtectedNames_dbo.Players_PlayerId");
        });

        modelBuilder.Entity<RecentPlayer>(entity =>
        {
            entity.HasKey(e => e.RecentPlayerId).HasName("PK_dbo.RecentPlayers");

            entity.Property(e => e.RecentPlayerId).HasDefaultValueSql("newsequentialid()");

            entity.HasOne(d => d.GameServer).WithMany(p => p.RecentPlayers).HasConstraintName("FK_dbo.RecentPlayers_dbo.GameServers_GameServerId");

            entity.HasOne(d => d.Player).WithMany(p => p.RecentPlayers).HasConstraintName("FK_dbo.RecentPlayers_dbo.Players_PlayerId");
        });

        modelBuilder.Entity<Report>(entity =>
        {
            entity.HasKey(e => e.ReportId).HasName("PK_dbo.Reports");

            entity.Property(e => e.ReportId).HasDefaultValueSql("newsequentialid()");

            entity.HasOne(d => d.AdminUserProfile).WithMany(p => p.ReportAdminUserProfiles).HasConstraintName("FK_dbo.Reports_dbo.AdminUserProfiles_Id");

            entity.HasOne(d => d.GameServer).WithMany(p => p.Reports).HasConstraintName("FK_dbo.Reports_dbo.GameServers_GameServerId");

            entity.HasOne(d => d.Player).WithMany(p => p.Reports).HasConstraintName("FK_dbo.Reports_dbo.Players_PlayerId");

            entity.HasOne(d => d.UserProfile).WithMany(p => p.ReportUserProfiles).HasConstraintName("FK_dbo.Reports_dbo.UserProfiles_Id");
        });

        modelBuilder.Entity<Tag>(entity =>
        {
            entity.HasKey(e => e.TagId).HasName("PK_dbo.Tags");

            entity.Property(e => e.TagId).HasDefaultValueSql("newsequentialid()");
        });

        modelBuilder.Entity<UserProfile>(entity =>
        {
            entity.Property(e => e.UserProfileId).HasDefaultValueSql("newsequentialid()");
        });

        modelBuilder.Entity<UserProfileClaim>(entity =>
        {
            entity.Property(e => e.UserProfileClaimId).HasDefaultValueSql("newsequentialid()");

            entity.HasOne(d => d.UserProfile).WithMany(p => p.UserProfileClaims)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.UserProfileClaims_dbo.UserProfiles_Id");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}