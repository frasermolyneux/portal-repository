name: Terraform Maintenance

on:
  workflow_dispatch:
    inputs:
      operation:
        description: "Select the Terraform maintenance operation to run"
        required: true
        type: choice
        default: import
        options:
          - import
          - destroy-targets
          - state-rm
      environment-slug:
        description: "Short key for the environment (used for tfvars/backends naming and concurrency controls)"
        required: true
        default: dev
      terraform-folder:
        description: "Path to the Terraform configuration folder"
        required: false
        default: terraform
      terraform-var-file:
        description: "Optional override for the Terraform var file. Leave blank to use tfvars/<slug>.tfvars"
        required: false
        default: ""
      terraform-additional-args:
        description: "Additional arguments to pass to Terraform commands"
        required: false
        default: ""
      import-address:
        description: "Terraform address to import (required when operation is import)"
        required: false
        default: ""
      import-id:
        description: "Existing resource ID to import (required when operation is import)"
        required: false
        default: ""
      destroy-targets:
        description: "JSON array of Terraform target addresses to destroy (required when operation is destroy-targets)"
        required: false
        default: ""
      state-addresses:
        description: "JSON array of Terraform state addresses to remove (required when operation is state-rm)"
        required: false
        default: ""

permissions:
  id-token: write
  contents: read

jobs:
  terraform-maintenance:
    name: Terraform Maintenance (${{ inputs.operation }})
    runs-on: ubuntu-latest
    environment: ${{ inputs['environment-slug'] == 'dev' && 'Development' || inputs['environment-slug'] == 'prd' && 'Production' || inputs['environment-slug'] }}
    concurrency:
      group: ${{ format('{0}-{1}-maintenance', github.repository, inputs['environment-slug']) }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Resolve Terraform paths
        id: resolve
        shell: bash
        env:
          INPUT_TERRAFORM_FOLDER: ${{ inputs['terraform-folder'] }}
          INPUT_TERRAFORM_VAR_FILE: ${{ inputs['terraform-var-file'] }}
          ENV_SLUG: ${{ inputs['environment-slug'] }}
        run: |
          set -euo pipefail

          TERRAFORM_FOLDER="${INPUT_TERRAFORM_FOLDER:-terraform}"

          if [ -z "$INPUT_TERRAFORM_VAR_FILE" ]; then
            TERRAFORM_VAR_FILE="tfvars/${ENV_SLUG}.tfvars"
          else
            TERRAFORM_VAR_FILE="$INPUT_TERRAFORM_VAR_FILE"
          fi

          DEFAULT_BACKEND_FILE="backends/${ENV_SLUG}.backend.hcl"

          if [ -f "${TERRAFORM_FOLDER}/${DEFAULT_BACKEND_FILE}" ]; then
            TERRAFORM_BACKEND_FILE="$DEFAULT_BACKEND_FILE"
          else
            TERRAFORM_BACKEND_FILE=""
          fi

          echo "terraform-folder=$TERRAFORM_FOLDER" >> "$GITHUB_OUTPUT"
          echo "terraform-var-file=$TERRAFORM_VAR_FILE" >> "$GITHUB_OUTPUT"
          echo "terraform-backend-file=$TERRAFORM_BACKEND_FILE" >> "$GITHUB_OUTPUT"

      - name: Validate import inputs
        if: ${{ inputs.operation == 'import' }}
        shell: bash
        env:
          IMPORT_ADDRESS: ${{ inputs['import-address'] }}
          IMPORT_ID: ${{ inputs['import-id'] }}
        run: |
          set -euo pipefail
          if [[ -z "$IMPORT_ADDRESS" || -z "$IMPORT_ID" ]]; then
            echo "import-address and import-id inputs are required when running the import operation" >&2
            exit 1
          fi

      - name: Validate destroy inputs
        if: ${{ inputs.operation == 'destroy-targets' }}
        shell: bash
        env:
          DESTROY_TARGETS: ${{ inputs['destroy-targets'] }}
        run: |
          set -euo pipefail
          if [[ -z "$DESTROY_TARGETS" ]]; then
            echo "destroy-targets input is required when running the destroy-targets operation" >&2
            exit 1
          fi

          echo "$DESTROY_TARGETS" | jq empty

      - name: Validate state-rm inputs
        if: ${{ inputs.operation == 'state-rm' }}
        shell: bash
        env:
          STATE_ADDRESSES: ${{ inputs['state-addresses'] }}
        run: |
          set -euo pipefail
          if [[ -z "$STATE_ADDRESSES" ]]; then
            echo "state-addresses input is required when running the state-rm operation" >&2
            exit 1
          fi

          echo "$STATE_ADDRESSES" | jq empty

      - name: Terraform import resource
        if: ${{ inputs.operation == 'import' }}
        uses: frasermolyneux/actions/terraform-import@main
        with:
          terraform-folder: ${{ steps.resolve.outputs.terraform-folder }}
          terraform-var-file: ${{ steps.resolve.outputs.terraform-var-file }}
          terraform-backend-file: ${{ steps.resolve.outputs.terraform-backend-file }}
          terraform-additional-args: ${{ inputs['terraform-additional-args'] }}
          AZURE_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
          AZURE_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
          AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
          import-address: ${{ inputs['import-address'] }}
          import-id: ${{ inputs['import-id'] }}

      - name: Terraform destroy targets
        if: ${{ inputs.operation == 'destroy-targets' }}
        uses: frasermolyneux/actions/terraform-destroy-resources@main
        with:
          terraform-folder: ${{ steps.resolve.outputs.terraform-folder }}
          terraform-var-file: ${{ steps.resolve.outputs.terraform-var-file }}
          terraform-backend-file: ${{ steps.resolve.outputs.terraform-backend-file }}
          terraform-additional-args: ${{ inputs['terraform-additional-args'] }}
          AZURE_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
          AZURE_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
          AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
          resources: ${{ inputs['destroy-targets'] }}

      - name: Terraform remove state addresses
        if: ${{ inputs.operation == 'state-rm' }}
        uses: frasermolyneux/actions/terraform-state-rm@main
        with:
          terraform-folder: ${{ steps.resolve.outputs.terraform-folder }}
          terraform-var-file: ${{ steps.resolve.outputs.terraform-var-file }}
          terraform-backend-file: ${{ steps.resolve.outputs.terraform-backend-file }}
          terraform-additional-args: ${{ inputs['terraform-additional-args'] }}
          AZURE_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
          AZURE_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
          AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
          state-addresses: ${{ inputs['state-addresses'] }}
