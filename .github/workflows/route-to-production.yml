name: Route To Production

on:
  push:
    branches: [ "main" ]

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read  # This is required for actions/checkout

jobs:
  dotnet-build-and-test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x

    - name: Set up dependency caching for faster builds
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
        
    - name: Restore dependencies
      run: |
        cd src
        dotnet restore
      
    - name: Build
      run: |
        cd src
        dotnet build --no-restore
      
    - name: Test
      run: |
        cd src
        dotnet test --no-build --verbosity normal --filter FullyQualifiedName!~IntegrationTests

    - name: dotnet publish repository-webapi
      run: |
        cd src
        dotnet publish repository-webapi/repository-webapi.csproj --configuration Release --output ${{env.DOTNET_ROOT}}/repository-webapi

    - name: Upload artifact repository-webapi
      uses: actions/upload-artifact@v3
      with:
        name: repository-webapi
        path: ${{env.DOTNET_ROOT}}/repository-webapi

  terraform-prereq-dev:
    environment: Development

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: 'Az CLI Login'
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    
    - name: Create Storage Account
      run: |
        az group create --location "uksouth" --name "rg-portal-repository-tf-dev-uksouth"
        az storage account create --name "saptlrepotfdev" --resource-group "rg-portal-repository-tf-dev-uksouth" --location "uksouth" --sku "Standard_LRS"
        az storage container create --name "terraform" --account-name "saptlrepotfdev"

  terraform-prereq-prd:
    environment: Production
    needs: ["terraform-prereq-dev"]

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: 'Az CLI Login'
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    
    - name: Create Storage Account
      run: |
        az group create --location "uksouth" --name "rg-portal-repository-tf-prd-uksouth"
        az storage account create --name "saptlrepotfprd" --resource-group "rg-portal-repository-tf-prd-uksouth" --location "uksouth" --sku "Standard_LRS"
        az storage container create --name "terraform" --account-name "saptlrepotfprd"

  terraform-plan-dev:
    runs-on: ubuntu-latest
    environment: Development
    needs: ["terraform-prereq-dev"]
    
    steps:
    - uses: actions/checkout@v3

    - name: 'Az CLI Login'
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Setup TFLint
      uses: terraform-linters/setup-tflint@v1
    
    - name: Terraform Init
      run: |
        cd terraform
        terraform init -backend-config=backends/dev.backend.hcl -var-file=tfvars/dev.tfvars
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_USE_OIDC: true

    - name: Terraform Validate
      run: |
        cd terraform
        terraform validate

    - name: Init TFLint
      run: tflint --init

    - name: Run TFLint
      run: tflint -f compact

    - name: Terraform Plan
      run: |
        cd terraform
        terraform plan -var-file=tfvars/dev.tfvars
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_USE_OIDC: true

  terraform-plan-prd:
    runs-on: ubuntu-latest
    environment: Production
    needs: ["terraform-prereq-prd"]
    
    steps:
    - uses: actions/checkout@v3

    - name: 'Az CLI Login'
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Setup TFLint
      uses: terraform-linters/setup-tflint@v1
    
    - name: Terraform Init
      run: |
        cd terraform
        terraform init -backend-config=backends/prd.backend.hcl -var-file=tfvars/prd.tfvars
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_USE_OIDC: true

    - name: Terraform Validate
      run: |
        cd terraform
        terraform validate

    - name: Init TFLint
      run: tflint --init

    - name: Run TFLint
      run: tflint -f compact

    - name: Terraform Plan
      run: |
        cd terraform
        terraform plan -var-file=tfvars/prd.tfvars
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_USE_OIDC: true

  terraform-apply-dev:
    runs-on: ubuntu-latest
    environment: Development
    needs: ["terraform-plan-dev"]
    
    steps:
    - uses: actions/checkout@v3

    - name: 'Az CLI Login'
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_wrapper: false

    - name: Terraform Init
      run: |
        cd terraform
        terraform init -backend-config=backends/dev.backend.hcl
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_USE_OIDC: true

    - name: Terraform Plan
      run: |
        cd terraform
        terraform plan -var-file=tfvars/dev.tfvars
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_USE_OIDC: true

    - name: Terraform Apply
      run: |
        cd terraform
        terraform apply -auto-approve -var-file=tfvars/dev.tfvars
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_USE_OIDC: true

    - name: Terraform Output
      id: terraform-output
      run: |
        cd terraform

        web_app_name=$(terraform output -raw web_app_name)
        web_app_resource_group=$(terraform output -raw web_app_resource_group)
        web_app_subscription_id=$(terraform output -raw web_app_subscription_id)
        workload_public_url=$(terraform output -raw workload_public_url)

        echo $web_app_name
        echo $web_app_resource_group
        echo $web_app_subscription_id
        echo $workload_public_url

        echo "web_app_name=$web_app_name" >> $GITHUB_OUTPUT
        echo "web_app_resource_group=$web_app_resource_group" >> $GITHUB_OUTPUT
        echo "web_app_subscription_id=$web_app_subscription_id" >> $GITHUB_OUTPUT
        echo "workload_public_url=$workload_public_url" >> $GITHUB_OUTPUT
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_USE_OIDC: true

    outputs:
      web_app_name: ${{ steps.terraform-output.outputs.web_app_name }}
      web_app_resource_group: ${{ steps.terraform-output.outputs.web_app_resource_group }}
      web_app_subscription_id: ${{ steps.terraform-output.outputs.web_app_subscription_id }}
      workload_public_url: ${{ steps.terraform-output.outputs.workload_public_url }}

  app-service-deploy-dev: 
    runs-on: ubuntu-latest
    environment: Development
    needs: ["dotnet-build-and-test", "terraform-apply-dev"]

    steps:
    - name: 'Get Terraform Output'
      run: |
        echo ${{needs.terraform-apply-dev.outputs.web_app_name}}
        echo ${{needs.terraform-apply-dev.outputs.web_app_resource_group}}
        echo ${{needs.terraform-apply-dev.outputs.web_app_subscription_id}}
        echo ${{needs.terraform-apply-dev.outputs.workload_public_url}}

    - name: 'Az CLI Login'
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Download artifact from build job
      uses: actions/download-artifact@v3
      with:
        name: repository-webapi

    - name: Switch subscription
      run: |
        az account set --subscription ${{needs.terraform-apply-dev.outputs.web_app_subscription_id}}

    - name: Deploy to Azure Web App
      id: deploy-to-webapp
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{needs.terraform-apply-dev.outputs.web_app_name}}
        package: '.'

  terraform-apply-prd:
    runs-on: ubuntu-latest
    environment: Production
    needs: ["terraform-plan-prd", "terraform-apply-dev", "app-service-deploy-dev"]
    
    steps:
    - uses: actions/checkout@v3

    - name: 'Az CLI Login'
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Terraform Init
      run: |
        cd terraform
        terraform init -backend-config=backends/prd.backend.hcl
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_USE_OIDC: true

    - name: Terraform Plan
      run: |
        cd terraform
        terraform plan -var-file=tfvars/prd.tfvars
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_USE_OIDC: true

    - name: Terraform Apply
      run: |
        cd terraform
        terraform apply -auto-approve -var-file=tfvars/prd.tfvars
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_USE_OIDC: true