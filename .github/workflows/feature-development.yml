# This workflow is used during feature development, it will perform lightweight CI and deploy through to the development environment.

name: Feature Development

on:
  workflow_dispatch:
  push:
    branches-ignore: [ "main" ]

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read  # This is required for actions/checkout
  
jobs:
  dotnet-web-ci:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - uses: frasermolyneux/actions/dotnet-web-ci@main
      with:
        dotnet-project: "repository-webapi"
        dotnet-version: 7.0.x
        src-folder: "src"

  terraform-plan-and-apply-dev:
    environment: DevelopmentIaCApply
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - uses: frasermolyneux/actions/terraform-plan-and-apply@main
        with:
          terraform-folder: "terraform"
          terraform-var-file: "tfvars/dev.tfvars"
          terraform-backend-file: "backends/dev.backend.hcl"
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - id: terraform-output
        shell: bash
        run: |
          cd terraform
          echo "web_app_name=$(terraform output -raw web_app_name)" >> $GITHUB_OUTPUT
          echo "web_app_resource_group=$(terraform output -raw web_app_resource_group)" >> $GITHUB_OUTPUT
          echo "workload_public_url=$(terraform output -raw workload_public_url)" >> $GITHUB_OUTPUT
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_USE_OIDC: true

    outputs:
      web_app_name: ${{ steps.terraform-output.outputs.web_app_name }}
      web_app_resource_group: ${{ steps.terraform-output.outputs.web_app_resource_group }}
      workload_public_url: ${{ steps.terraform-output.outputs.workload_public_url }}

  app-service-deploy-dev:
    environment: DevelopmentWebApps
    runs-on: ubuntu-latest
    needs: [dotnet-web-ci, terraform-plan-and-apply-dev]

    steps:
      - uses: actions/checkout@v3

      - uses: frasermolyneux/actions/deploy-app-service@main
        with:
          web-artifact-name: "repository-webapi"
          web-app-name: ${{ needs.terraform-plan-and-apply-dev.outputs.web_app_name }}
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

  run-api-integration-tests-dev:
    runs-on: ubuntu-latest
    needs: [app-service-deploy-dev, terraform-plan-and-apply-dev]

    steps:
      - uses: actions/checkout@v3

      - uses: frasermolyneux/actions/run-api-integration-tests@main
        with:
          dotnet-version: 7.0.x
          src-folder: "src"
          web-app-name: ${{ needs.terraform-plan-and-apply-dev.outputs.workload_public_url }}

  delete-resources-dev:
    runs-on: ubuntu-latest
    environment: DevelopmentWebApps
    needs: [terraform-plan-and-apply-dev, run-api-integration-tests-dev]

    steps:
    - name: 'Az CLI Login'
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Delete Resources
      run: |
        az webapp delete --name ${{needs.terraform-plan-and-apply-dev.outputs.web_app_name}} --resource-group ${{needs.terraform-plan-and-apply-dev.outputs.web_app_resource_group}} --keep-empty-plan